/**
 * Clear floating elements
 **/
clearfix()
	&:before
	&:after
		content ""
		display table
	&:after
		clear both

/**
 * Center block
 **/
centerBlock()
	margin-left auto
	margin-right auto
	display block

/**
 * Basic container
 **/
container(size = sizeWidthContent)
	max-width size
	padding-left 'calc(50% - %s)' % (size / 2)
	padding-right 'calc(50% - %s)' % (size / 2)

	@media mediaQueryTablet
		padding-left sizeWidthGutter
		padding-right sizeWidthGutter

/**
 * List Unstyled
 **/
listUnstyled()
	margin 0
	padding 0
	list-style none

/**
 * Px to Em
 **/
em(value, base = 16)
	value = remove-unit(value)
	base = remove-unit(base)
	value / base * 1em

/**
 * Px to Rem
 **/
rem(value, base = 16)
	value = remove-unit(value)
	base = remove-unit(base)
	value / base * 1rem

/**
 * Px to Percent
 **/
percentage(value, base)
	value = remove-unit(value)
	base = remove-unit(base)
	(value / base * 100)%

/**
 * Size shortcut (square by default)
 **/
size(width, height = width)
	height height
	width width

/**
 * Screenreaders only
 **/
screenReaders()
	position absolute !important
	width 1px !important
	height 1px !important
	padding 0 !important
	margin -1px !important
	overflow hidden !important
	clip rect(0, 0, 0, 0) !important
	border 0 !important

/**
 * Floats
 **/
pull(value)
	float value

/**
 * Hide text
 **/
textHide()
	font "0/0" a
	color transparent
	text-shadow none
	background-color transparent
	border 0

/**
 * Responsive images
 **/
imgResponsive(display = block)
	display display
	max-width 100%
	height auto

/**
 * Position locking
 **/
absoluteLock(top = auto, right = top, bottom = top, left = right)
	top top
	right right
	bottom bottom
	left left

/**
 * Generate long shadow at a specific size
 **/
shadowMaker(iterations, blur, color)
	$shadows = '0 0 0 transparent'
	for i in 1..iterations
		$shadows += ', %spx %spx' % (i i) blur color

longShadow(iterations = 10, blur = 0, color = rgba(0, 0, 0, .5))
	text-shadow unquote(shadowMaker(iterations, blur, color))

/**
 * Font-Face declaration generator
 **/
fontFace(font-name, font-src, svg-name = font-name, font-weight = 400, font-style = normal, formats = eot woff2 woff truetype svg)
	@font-face
		fonts = ()
		font-family font-name
		if eot in formats
			src url(font-src + ".eot")
			push(fonts, 'url("' + font-src + '.eot?iefix") format("emebedded-opentype")')
		if woff2 in formats
			push(fonts, 'url("' + font-src + '.woff2") format("woff2")')
		if woff in formats
			push(fonts, 'url("' + font-src + '.woff") format("woff")')
		if opentype in formats || otf in formats
			push(fonts, 'url("' + font-src + '.otf") format("opentype")')
		if truetype in formats || ttf in formats
			push(fonts, 'url("' + font-src + '.ttf") format("truetype")')
		if svg in formats
			push(fonts, 'url("' + font-src + '.svg#' + svg-name + '") format("svg")')
		src unquote(join(", ", fonts))
		font-weight font-weight
		font-style font-style

/**
 * Create color-based content
 **/
colorContext(background, border, text, icon)
	background-color background
	border-color border
	color text

	hr
		boder-top-color darken(border, 5%)

	a
		color darken(text, 10%)

/**
 * Notes
 **/
noteMaker(color, icon)
	color color
	background lighten(color, 90%)
	border 1px solid lighten(color, 50%)

	&:before
		content icon

	em
	strong
		color darken(color, 15%)
